clust_casted = dcast(clust_joined, source ~ target, value.var="pid")
clust_casted[(is.na(clust_casted) == TRUE)] = 0.0
rownames(clust_casted) = clust_casted$source
clust_casted$source = NULL
mat = as.matrix(clust_casted)
diag(mat) = 100.0
return(mat)
}
get_cluster_groups = function(cluster, fname, id){
df = data.frame()
species_names = str_split_fixed(rownames(clust), fixed("|"), n=2)[,1]
gene_names = str_split_fixed(rownames(clust), fixed("|"), n=2)[,2]
total_species = length(species_names)
total_genes = length(gene_names)
total_unique_species = length(unique(species_names))
total_unique_genes = length(unique(gene_names))
h = hclust(d = dist(cluster))
dend = as.dendrogram(h, hang = 0.5)
cut = cutree(h, k = 2)
group1 = cut[which(cut == 1)]
group2 = cut[which(cut == 2)]
n1 = names(group1)
n2 = names(group2)
c1_species = length(str_split_fixed(n1, fixed("|"), n=2)[,1])
c1_genes = length(str_split_fixed(n1, fixed("|"), n=2)[,2])
c2_species = length(str_split_fixed(n2, fixed("|"), n=2)[,1])
c2_genes = length(str_split_fixed(n2, fixed("|"), n=2)[,2])
c1 = cluster[which(rownames(cluster) %in% n1),
which(colnames(cluster) %in% n1)]
c2 = cluster[which(rownames(cluster) %in% n2),
which(colnames(cluster) %in% n2)]
c1_mean_pid = mean(c1)
c2_mean_pid = mean(c2)
labelColors = c("#0000FF", "#FF0000")
colLab <- function(n) {
if (is.leaf(n)) {
a <- attributes(n)
labCol <- labelColors[cut[which(names(cut) == a$label)]]
attr(n, "nodePar") <- c(a$nodePar, lab.col = labCol)
}
n
}
clusDendro = dendrapply(dend, colLab)
# print(get_nodes_xy(clusDendro))
pdf(file=fname, width=12, height=8)
par(mar=c(9,9,9,9))
plot(clusDendro, horiz=T, main= paste0("cluster_", id), cex=0.6, type="rectangle")
dev.off()
return(c(c1_mean_pid, c2_mean_pid, c1_species, c2_species, c1_genes, c2_genes, total_species, total_genes,
total_unique_species, total_unique_genes, paste(n1, collapse=","), paste(n2, collapse=",")))
}
# Note: Cluster_matrix must be symmetrical
sub_cluster = function(cluster_matrix, genes){
row_idx = grep(paste(genes, collapse="|"), rownames(cluster_matrix))
return(cluster_matrix[row_idx, row_idx])
}
sub_column = function(cluster_matrix, genes){
col_idx = grep(paste(genes, collapse="|"), rownames(cluster_matrix))
return(cluster_matrix[, col_idx])
}
draw_heatmap = function(cluster,fname){
pdf(file=fname)
heatmap.2(cluster, dendrogram="both",
scale="none", trace="none",
cellnote=cluster, notecol="black",
notecex=0.5,
margins = c(10,10))
dev.off()
}
############################################################
final = c()
slc_sim = c()
lc_sim = c()
for(i in (1:52)){
file_name = paste0("~/Desktop/recips/clusters/cluster_",i,"_genes.tsv")
clust = readClusters(file_name, 99.0)
# draw_heatmap(clust, paste0("~/Desktop/recips/clusters/cluster_",i,"_heatmap.pdf"))
# cData  = get_cluster_groups(clust, paste0("~/Desktop/recips/clusters/cluster_",i,"_tree.pdf"), i)
# cName = paste0("cluster_",i,"_genes.tsv")
# cAll = c(cName, cData)
# final = rbind(final, cAll)
# slc_name = paste0("cluster_",i,"_slc_genes.csv")
# slc = sub_cluster(clust, c("cflo", "lhum", "sinv"))
# slc_sim = rbind(slc_sim, c(slc_name, mean(slc)))
# write.table(slc, file = slc_name, sep=",", quote=T)
lc_name = paste0("cluster_",i,"_lc_genes.csv")
lc = sub_cluster(clust, c("cflo", "lhum"))
mean_pid = mean(lc)
if(is.nan(mean_pid) == F){
print(mean_pid)
if(mean_pid > 98.0){
lc_sim = rbind(lc_sim, c(lc_name, mean_pid))
# Here, get genes from the other species that match lhum and cflo
lc_cols = clust[,grep(colnames(clust), paste(c("cflo", "lhum"),collapse="|"))]
lc_other = lc_cols[which(lc_cols[,1] != 0 & lc_cols[,2] != 0),]
print(lc_other)
}
# write.table(lc, file = lc_name, sep=",", quote=T)
}
}
rm(list=ls())
library(plyr)
library(stringr)
library(reshape2)
library(gplots)
library(dendextend)
# Reads in a cluster file, filters by percent identity, then converts clusters data
#  from "long" to "wide" format
readClusters = function(fname, pid_cutoff){
clust = read.table(fname, sep="\t", header=F)
clust = clust[which(clust$V5 > pid_cutoff),]
source = str_c(clust$V1, clust$V3,sep = "|")
target = str_c(clust$V2, clust$V4,sep = "|")
pid = clust$V5
clust_joined = data.frame(source = as.character(source),
target = as.character(target),
pid = as.numeric(pid))
clust_casted = dcast(clust_joined, source ~ target, value.var="pid")
clust_casted[(is.na(clust_casted) == TRUE)] = 0.0
rownames(clust_casted) = clust_casted$source
clust_casted$source = NULL
mat = as.matrix(clust_casted)
diag(mat) = 100.0
return(mat)
}
get_cluster_groups = function(cluster, fname, id){
df = data.frame()
species_names = str_split_fixed(rownames(clust), fixed("|"), n=2)[,1]
gene_names = str_split_fixed(rownames(clust), fixed("|"), n=2)[,2]
total_species = length(species_names)
total_genes = length(gene_names)
total_unique_species = length(unique(species_names))
total_unique_genes = length(unique(gene_names))
h = hclust(d = dist(cluster))
dend = as.dendrogram(h, hang = 0.5)
cut = cutree(h, k = 2)
group1 = cut[which(cut == 1)]
group2 = cut[which(cut == 2)]
n1 = names(group1)
n2 = names(group2)
c1_species = length(str_split_fixed(n1, fixed("|"), n=2)[,1])
c1_genes = length(str_split_fixed(n1, fixed("|"), n=2)[,2])
c2_species = length(str_split_fixed(n2, fixed("|"), n=2)[,1])
c2_genes = length(str_split_fixed(n2, fixed("|"), n=2)[,2])
c1 = cluster[which(rownames(cluster) %in% n1),
which(colnames(cluster) %in% n1)]
c2 = cluster[which(rownames(cluster) %in% n2),
which(colnames(cluster) %in% n2)]
c1_mean_pid = mean(c1)
c2_mean_pid = mean(c2)
labelColors = c("#0000FF", "#FF0000")
colLab <- function(n) {
if (is.leaf(n)) {
a <- attributes(n)
labCol <- labelColors[cut[which(names(cut) == a$label)]]
attr(n, "nodePar") <- c(a$nodePar, lab.col = labCol)
}
n
}
clusDendro = dendrapply(dend, colLab)
# print(get_nodes_xy(clusDendro))
pdf(file=fname, width=12, height=8)
par(mar=c(9,9,9,9))
plot(clusDendro, horiz=T, main= paste0("cluster_", id), cex=0.6, type="rectangle")
dev.off()
return(c(c1_mean_pid, c2_mean_pid, c1_species, c2_species, c1_genes, c2_genes, total_species, total_genes,
total_unique_species, total_unique_genes, paste(n1, collapse=","), paste(n2, collapse=",")))
}
# Note: Cluster_matrix must be symmetrical
sub_cluster = function(cluster_matrix, genes){
row_idx = grep(paste(genes, collapse="|"), rownames(cluster_matrix))
return(cluster_matrix[row_idx, row_idx])
}
sub_column = function(cluster_matrix, genes){
col_idx = grep(paste(genes, collapse="|"), rownames(cluster_matrix))
return(cluster_matrix[, col_idx])
}
draw_heatmap = function(cluster,fname){
pdf(file=fname)
heatmap.2(cluster, dendrogram="both",
scale="none", trace="none",
cellnote=cluster, notecol="black",
notecex=0.5,
margins = c(10,10))
dev.off()
}
############################################################
final = c()
slc_sim = c()
lc_sim = c()
for(i in (1:52)){
file_name = paste0("~/Desktop/recips/clusters/cluster_",i,"_genes.tsv")
clust = readClusters(file_name, 99.0)
# draw_heatmap(clust, paste0("~/Desktop/recips/clusters/cluster_",i,"_heatmap.pdf"))
# cData  = get_cluster_groups(clust, paste0("~/Desktop/recips/clusters/cluster_",i,"_tree.pdf"), i)
# cName = paste0("cluster_",i,"_genes.tsv")
# cAll = c(cName, cData)
# final = rbind(final, cAll)
# slc_name = paste0("cluster_",i,"_slc_genes.csv")
# slc = sub_cluster(clust, c("cflo", "lhum", "sinv"))
# slc_sim = rbind(slc_sim, c(slc_name, mean(slc)))
# write.table(slc, file = slc_name, sep=",", quote=T)
lc_name = paste0("cluster_",i,"_lc_genes.csv")
lc = sub_cluster(clust, c("cflo", "lhum"))
mean_pid = mean(lc)
if(is.nan(mean_pid) == F){
print(mean_pid)
if(mean_pid > 98.0){
lc_sim = rbind(lc_sim, c(lc_name, mean_pid))
# Here, get genes from the other species that match lhum and cflo
lc_cols = clust[,grep(paste(c("cflo", "lhum"), collapse="|"),colnames(clust))]
lc_other = lc_cols[which(lc_cols[,1] != 0 & lc_cols[,2] != 0),]
print(lc_other)
}
# write.table(lc, file = lc_name, sep=",", quote=T)
}
}
rm(list=ls())
library(plyr)
library(stringr)
library(reshape2)
library(gplots)
library(dendextend)
# Reads in a cluster file, filters by percent identity, then converts clusters data
#  from "long" to "wide" format
readClusters = function(fname, pid_cutoff){
clust = read.table(fname, sep="\t", header=F)
clust = clust[which(clust$V5 > pid_cutoff),]
source = str_c(clust$V1, clust$V3,sep = "|")
target = str_c(clust$V2, clust$V4,sep = "|")
pid = clust$V5
clust_joined = data.frame(source = as.character(source),
target = as.character(target),
pid = as.numeric(pid))
clust_casted = dcast(clust_joined, source ~ target, value.var="pid")
clust_casted[(is.na(clust_casted) == TRUE)] = 0.0
rownames(clust_casted) = clust_casted$source
clust_casted$source = NULL
mat = as.matrix(clust_casted)
diag(mat) = 100.0
return(mat)
}
get_cluster_groups = function(cluster, fname, id){
df = data.frame()
species_names = str_split_fixed(rownames(clust), fixed("|"), n=2)[,1]
gene_names = str_split_fixed(rownames(clust), fixed("|"), n=2)[,2]
total_species = length(species_names)
total_genes = length(gene_names)
total_unique_species = length(unique(species_names))
total_unique_genes = length(unique(gene_names))
h = hclust(d = dist(cluster))
dend = as.dendrogram(h, hang = 0.5)
cut = cutree(h, k = 2)
group1 = cut[which(cut == 1)]
group2 = cut[which(cut == 2)]
n1 = names(group1)
n2 = names(group2)
c1_species = length(str_split_fixed(n1, fixed("|"), n=2)[,1])
c1_genes = length(str_split_fixed(n1, fixed("|"), n=2)[,2])
c2_species = length(str_split_fixed(n2, fixed("|"), n=2)[,1])
c2_genes = length(str_split_fixed(n2, fixed("|"), n=2)[,2])
c1 = cluster[which(rownames(cluster) %in% n1),
which(colnames(cluster) %in% n1)]
c2 = cluster[which(rownames(cluster) %in% n2),
which(colnames(cluster) %in% n2)]
c1_mean_pid = mean(c1)
c2_mean_pid = mean(c2)
labelColors = c("#0000FF", "#FF0000")
colLab <- function(n) {
if (is.leaf(n)) {
a <- attributes(n)
labCol <- labelColors[cut[which(names(cut) == a$label)]]
attr(n, "nodePar") <- c(a$nodePar, lab.col = labCol)
}
n
}
clusDendro = dendrapply(dend, colLab)
# print(get_nodes_xy(clusDendro))
pdf(file=fname, width=12, height=8)
par(mar=c(9,9,9,9))
plot(clusDendro, horiz=T, main= paste0("cluster_", id), cex=0.6, type="rectangle")
dev.off()
return(c(c1_mean_pid, c2_mean_pid, c1_species, c2_species, c1_genes, c2_genes, total_species, total_genes,
total_unique_species, total_unique_genes, paste(n1, collapse=","), paste(n2, collapse=",")))
}
# Note: Cluster_matrix must be symmetrical
sub_cluster = function(cluster_matrix, genes){
row_idx = grep(paste(genes, collapse="|"), rownames(cluster_matrix))
return(cluster_matrix[row_idx, row_idx])
}
sub_column = function(cluster_matrix, genes){
col_idx = grep(paste(genes, collapse="|"), rownames(cluster_matrix))
return(cluster_matrix[, col_idx])
}
draw_heatmap = function(cluster,fname){
pdf(file=fname)
heatmap.2(cluster, dendrogram="both",
scale="none", trace="none",
cellnote=cluster, notecol="black",
notecex=0.5,
margins = c(10,10))
dev.off()
}
############################################################
final = c()
slc_sim = c()
lc_sim = c()
for(i in (1:52)){
file_name = paste0("~/Desktop/recips/clusters/cluster_",i,"_genes.tsv")
clust = readClusters(file_name, 99.0)
# draw_heatmap(clust, paste0("~/Desktop/recips/clusters/cluster_",i,"_heatmap.pdf"))
# cData  = get_cluster_groups(clust, paste0("~/Desktop/recips/clusters/cluster_",i,"_tree.pdf"), i)
# cName = paste0("cluster_",i,"_genes.tsv")
# cAll = c(cName, cData)
# final = rbind(final, cAll)
# slc_name = paste0("cluster_",i,"_slc_genes.csv")
# slc = sub_cluster(clust, c("cflo", "lhum", "sinv"))
# slc_sim = rbind(slc_sim, c(slc_name, mean(slc)))
# write.table(slc, file = slc_name, sep=",", quote=T)
lc_name = paste0("cluster_",i,"_lc_genes.csv")
lc_other_name = paste0("cluster_",i,"_lc_other_genes.csv")
lc = sub_cluster(clust, c("cflo", "lhum"))
mean_pid = mean(lc)
if(is.nan(mean_pid) == F){
print(mean_pid)
if(mean_pid > 98.0){
lc_sim = rbind(lc_sim, c(lc_name, mean_pid))
# Here, get genes from the other species that match lhum and cflo
lc_cols = clust[,grep(paste(c("cflo", "lhum"), collapse="|"),colnames(clust))]
lc_other = lc_cols[which(lc_cols[,1] != 0 & lc_cols[,2] != 0),]
write.table(lc_other, file=lc_other_name, sep=",", quote=T)
}
# write.table(lc, file = lc_name, sep=",", quote=T)
}
}
getwd()
source('multiplot.R')
setwd('~/Documents/code/skin_dev_rna_seq/analysis/')
source('multiplot.R')
library(stringr)
library(reshape)
library(ggplot2)
dge = read_dge("../data/all_diffexp_genes.csv")
read_dge = function(file){
# Reads in log-fold change data from a limma voom analysis
#   (see genotype_analysis_script.R)
#
# Args:
#   file: String of the file name for the gene expression table
#
# Returns: A data frame for log-fold changes from the RNA-seq experiment
#          specified in search_string
#
df = read.csv(file, header=TRUE, row.names=TRUE, stringsAsFactors=FALSE)
return(df)
}
dge = read_dge("../data/all_diffexp_genes.csv")
read_dge = function(file){
# Reads in log-fold change data from a limma voom analysis
#   (see genotype_analysis_script.R)
#
# Args:
#   file: String of the file name for the gene expression table
#
# Returns: A data frame for log-fold changes from the RNA-seq experiment
#          specified in search_string
#
df = read.csv(file, header=TRUE, stringsAsFactors=FALSE)
return(df)
}
dge = read_dge("../data/all_diffexp_genes.csv")
head(dge)
read_dge = function(file){
# Reads in log-fold change data from a limma voom analysis
#   (see genotype_analysis_script.R)
#
# Args:
#   file: String of the file name for the gene expression table
#
# Returns: A data frame for log-fold changes from the RNA-seq experiment
#          specified in search_string
#
df = read.csv(file, header=TRUE, stringsAsFactors=FALSE)
colnames(df) = c("gene_Id",
"het_v_wt_FC",
"mut_v_wt_FC",
"AveExpr",
"F", "P.Value", "adj.P.Val", "gene", "timepoint")
return(df)
}
#######################
# EXECUTED STATEMENTS #
#######################
dge = read_dge("../data/all_diffexp_genes.csv")
head(dge)
dge_select = dge[which(dge$gene %in% gene_list),]
gene_list = c("g15049", "g06152", "g15227") # edit this to work with any list of genes
dge_select = dge[which(dge$gene %in% gene_list),]
head(dge_select)
?grep
paste(gene_list,sep='|')
paste(gene_list,'|')
paste(gene_list, collapse='|')
grep(paste(gene_list, collapse='|'), dge$gene)
dge[grep(paste(gene_list, collapse='|'), dge$gene),]
dge[grep(paste(gene_list, collapse='|'), dge$gene, fixed =TRUE),]
gene_list = c("^g15049$", "^g06152&", "^g15227&") # edit this to work with any list of genes
dge_select = dge[grep(paste(gene_list, collapse='|'), dge$gene),]
dge_select
paste(gene_list, collapse='|')
gene_list = c("^g15049$", "^g06152$", "^g15227$") # edit this to work with any list of genes
dge_select = dge[grep(paste(gene_list, collapse='|'), dge$gene),]
dge_select
dge_select = dge[(gene_list == dge_select$gene),]
dge_select
dge_select = dge[(dge_select$gene == gene_list),]
dge_select
?grepl
for(g in 1:length(gene_list)){
dge_select = cbind(dge_select, dge[grep(gene_list[i], dge$gene, fixed=TRUE),])
}
dge_select = data.frame()
for(g in 1:length(gene_list)){
dge_select = rbind(dge_select, dge[grep(gene_list[i], dge$gene, fixed=TRUE),])
}
dge_select
dge[grep("g15049", dge$gene, fixed=TRUE),]
dge[grep("<\\g15049\\>", dge$gene),]
dge[grep("<\g15049\>", dge$gene),]
dge[grep("^g15049$", dge$gene),]
dge[grep("^g15049", dge$gene),]
dge[grep("^g15049$", dge$gene),]
dge[grep("\\g15049\\b", dge$gene),]
dge[grep("\\g15049\\b", dge$gene, value=T),]
dge[grep("\\g15049\\b", dge$gene),]
dge[grep("\\bg15049\\b", dge$gene),]
dge[grep("\\<g15049\\>", dge$gene),]
dge[grep("\\bg15049\\b", dge$gene),]
dge[grep("\bg15049\b", dge$gene),]
dge[grep("\bg15049\b", dge$gene, perl=TRUE),]
dge[grep("\\bg15049\\b", dge$gene, perl=TRUE),]
(gene_list %in% dge$gene)
(dge$gene %in% gene_list)
dge[(dge$gene %in% gene_list),]
dge[(gene_list %in% dge$gene),]
dge[which(gene_list %in% dge$gene),]
gene_list = c("g15049", "g06152", "g15227") # edit this to work with any list of genes
dge[which(gene_list %in% dge$gene),]
dge[which(dge$gene %in% gene_list),]
dge_select = dge[which(dge$gene %in% gene_list),]
dge_select
dge_select = dge[which(dge$gene %in% gene_list),]
dge_select
ggplot(data=dge_select, aes(x=timepoint, y = value, colour=genotype)) +
geom_point() +
geom_line(aes(group=genotype)) +
facet_grid(~ gene) +
xlab("Timepoint") +
ylab("Log Fold-Change")
dge_select = dge[which(dge$gene %in% gene_list),
c(2,3,8,9)]
head(dge_select)
mdf = melt(dge_select, id.vars=3:4, measure.vars=1:2, variable_name = "genotype")
head(mdf)
ggplot(data=mdf, aes(x=timepoint, y = value, colour=genotype)) +
geom_point() +
geom_line(aes(group=genotype)) +
facet_grid(~ gene) +
xlab("Timepoint") +
ylab("Log Fold-Change")
?ggplot
ggplot(data=mdf, aes(x=timepoint, y = value, colour=genotype)) +
geom_point() +
geom_line(aes(group=genotype)) +
facet_grid(~ gene) +
xlab("Timepoint") +
ylab("Log Fold-Change") +
theme(axis.text.x = element_text(colour="black"))
ggplot(data=mdf, aes(x=timepoint, y = value, colour=genotype)) +
geom_point() +
geom_line(aes(group=genotype)) +
facet_grid(~ gene) +
xlab("Timepoint") +
ylab("Log Fold-Change") +
theme(axis.text.x = element_text(colour="black", angle=45))
ggplot(data=mdf, aes(x=timepoint, y = value, colour=genotype)) +
geom_point() +
geom_line(aes(group=genotype)) +
facet_grid(~ gene) +
xlab("Timepoint") +
ylab("Log Fold-Change") +
theme(axis.text.x = element_text(colour="black", angle=45, hjust=1, vjust=1))
ggplot(data=mdf, aes(x=timepoint, y = value, colour=genotype)) +
geom_point() +
geom_line(aes(group=genotype)) +
facet_grid(~ gene) +
xlab("Timepoint") +
ylab("Log Fold-Change") +
theme(axis.text.x = element_text(colour="black", angle=45, hjust=1, vjust=1),
strip.text.x = element_text(face="bold"))
head(mdf)
head(dg)
head(dge)
paste(c("../plots/time_v_fc",paste(gene_list, collapse="_")),collapse="_")
print(paste(plot_name,".pdf"))
plot_name = paste(c("../plots/time_v_fc",
paste(gene_list, collapse="_")),
collapse="_")
print(paste(plot_name,".pdf"))
print(paste(plot_name,".pdf", collapse=""))
print(paste0(plot_name,".pdf"))
head(dge_select)
