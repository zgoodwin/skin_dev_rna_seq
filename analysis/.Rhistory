abline(h=1, lty=5, col = "red")
labs <- as.vector(df[, 1])
text(cex = 1, x = x, y = -0.02, labs, xpd = TRUE, srt = 45, pos = 2)
return()
}
dev.off()
plotWeights(weights, experimentName)
dev.off()
par(mfrow = c(2,2))
plotMeanVariance(v, experimentName)
plotWeights(weights, experimentName)
getMdsPlot(v, experimentName, designMatrix)
?png
paste0(experimentName, "_quality_plots.png")
png(filename = paste0(experimentName, "_quality_plots.png"), width = 8, height = 8)
par(mfrow = c(2,2))
plotMeanVariance(v, experimentName)
plotWeights(weights, experimentName)
getMdsPlot(v, experimentName, designMatrix)
dev.off()
png(filename = paste0(experimentName, "_quality_plots.png"), width = 8, height = 8, units="in")
par(mfrow = c(2,2))
plotMeanVariance(v, experimentName)
plotWeights(weights, experimentName)
getMdsPlot(v, experimentName, designMatrix)
dev.off()
png(filename = paste0(experimentName, "_quality_plots.png"), width = 8, height = 8, units="in")
pdf(filename = paste0(experimentName, "_quality_plots.pdf"), width = 8, height = 8, units="in")
par(mfrow = c(2,2))
plotMeanVariance(v, experimentName)
plotWeights(weights, experimentName)
getMdsPlot(v, experimentName, designMatrix)
dev.off()
pdf(filename = paste0(experimentName, "_quality_plots.pdf"), width = 8, height = 8, units="in")
par(mfrow = c(2,2))
plotMeanVariance(v, experimentName)
plotWeights(weights, experimentName)
getMdsPlot(v, experimentName, designMatrix)
dev.off()
?pdf
pdf(filename = paste0(experimentName, "_quality_plots.pdf"), width = 8, height = 8)
par(mfrow = c(2,2))
plotMeanVariance(v, experimentName)
plotWeights(weights, experimentName)
getMdsPlot(v, experimentName, designMatrix)
dev.off()
pdf(file = paste0(experimentName, "_quality_plots.pdf"), width = 8, height = 8)
par(mfrow = c(2,2))
plotMeanVariance(v, experimentName)
plotWeights(weights, experimentName)
getMdsPlot(v, experimentName, designMatrix)
dev.off()
?write.table
NUM_HITS <- Inf # Return all differentially expressed genes
MULTIPLE_TEST_CORRECTION <- "BH"
########################
#       PACKAGES       #
########################
if (!require("pacman")) install.packages("pacman")
pacman::p_load(limma, edgeR, stringr, reshape, ggplot2, optparse)
#######################
#      FUNCTIONS      #
#######################
setupDge <- function(countsTable){
# Creates a dge object.
#
# Args:
#   counts_table: Table of read counts
#
# Returns: A voom dge object for the RNA-seq experiment
#
thisDge <- DGEList(counts = countsTable)
thisDge <- calcNormFactors(thisDge)
## Get rid of all genes with less than 10 counts (counts per million < 2)
#  If you don't do this, the distribution of read counts will be highly skewed!
keep <- rowSums(cpm(thisDge)>2) >= 3
filteredDge <- thisDge[keep, , keep.lib.sizes=FALSE]
return(filteredDge)
}
getMdsPlot <- function(dgeObject, searchString, sampleList){
# Generate an MDS plot for count data wrapped in a DGE object
#
# Args:
#   dgeObject: A limma dge object representing an RNA-seq experiment
#   searchString: Key name to access an experiment from counts_table
#   sampleList: Data frame of sample metadata
#
# Returns: an R plot object
#
samples = sampleList[, 1]
plot = plotMDS(dgeObject, labels=samples,
main=paste(searchString, "MDS", sep=" "),
xlim=c(-1.5,1.5),
ylim=c(-1.5,1.5))
return(plot)
}
getDesignMatrix <- function(age, reference){
# Create a design matrix for fitting linear models to the count data.
#
# Args:
#   dge_object: Sample metadata table
#   age: Key name to access an experiment from counts_table
#   sampleList: Name of the reference genotype
#
# Returns: a text object representing a design matrix for a linear model
#
sample = sampleList[grep(searchString,sampleList$Age),]
genotype = relevel(sample$Genotype, ref=reference)
design = model.matrix(~genotype)
return(design)
}
plotMeanVariance <- function(voomObject, title){
# Produces a plot that shows the read counts for each gene (x-axis)
#   count standard deviation for each gene.
#
# Args:
#   voomObject: Sample metadata table
#   title: The title of the plot
#
# Returns: an R plot object
#
p <- plot(voomObject$voom.xy,
main = paste(title,":Mean-variance trend"),
xlab = "log2( count size + 0.5 )",
ylab = "Sqrt( standard deviation )")
lines(voomObject$voom.line$x, voomObject$voom.line$y, type = "l", col="red")
return(p)
}
plotWeights <- function(voomObject, title){
# Plot the weights for each RNA-seq experiment.
#
# Args:
#   voomObject: Normalized limma voom object.
#   title: Plot title
#
# This part puts the samples and weights into a data frame so ggplot can
# read them.
#
# Returns: an R plot object
df <- data.frame(samples = rownames(voomObject$targets),
wts = voomObject$sample.weights)
x <- barplot(height = df[, 2],
xaxt = "n",
main = paste0(title, " - Quality Weights"))
abline(h=1, lty=5, col = "red")
labs <- as.vector(df[, 1])
text(cex = 1, x = x, y = -0.02, labs, xpd = TRUE, srt = 45, pos = 2)
return()
}
controlCounts = "../data/het_E15.5.csv"
testCounts = "../data/wt_E15.5.csv"
controlCounts = "../data/wt_E15.5.csv"
testCounts = "../data/mut_E15.5.csv"
controlCounts <- read.csv("../data/het_E15.5.csv", header=T, row.names=1)
testCounts <- read.csv("../data/mut_E15.5.csv", header=T, row.names=1)
controlCounts <- read.csv("../data/wt_E15.5.csv", header=T, row.names=1)
allCounts <- cbind(controlCounts, testCounts)
numControlReplicates <- ncol(controlCounts)
numTestReplicates <- ncol(testCounts)
designMatrix <- data.frame(sampleName = c(colnames(controlCounts),
colnames(testCounts)),
groupId = c(rep("REF", numControlReplicates),
rep("TEST", numTestReplicates)))
design <- model.matrix(~groupId)
dge <- setupDge(allCounts)
v <- voom(dge, design, plot=FALSE, save.plot = TRUE)
weights <- voomWithQualityWeights(dge, design,
normalization = "none", plot=FALSE)
vfit = lmFit(weights) %>% eBayes(.)
hits = topTable(vfit,
adjust = MULTIPLE_TEST_CORRECTION,
number = NUM_HITS,
sort.by = "p")
hits$ExperimentName = rep(age,nrow(hits))
design <- model.matrix(~groupId)
design
designMatrix
??model.matrix
library(lm)
designMatrix
design
?model.matrix
design <- model.matrix(~groupId, designMatrix)
design
X <- read.table("./all_counts.csv", sep=",", stringsAsFactors=F, header=T)
head(X)
X <- read.table("./all_counts.csv", sep=",", stringsAsFactors=F, header=T, row.names = T)
X <- read.table("./all_counts.csv", sep=",", stringsAsFactors=F, header=T, rownames = T)
X <- read.table("./all_counts.csv", sep=",", stringsAsFactors=F, header=T, rownames = 1)
X <- read.table("./all_counts.csv", sep=",", stringsAsFactors=F, header=T, row.names = 1)
head(x)
head(X)
X <- read.table("./all_counts.csv", sep=",", stringsAsFactors=F, header=T, row.names = 1)
sampleList <- c("het_E14.5",
"het_E15.5",
"het_E16.5",
"het_E17.5",
"het_NB",
"mut_E14.5",
"mut_E15.5",
"mut_E16.5",
"mut_E17.5",
"mut_NB",
"wt_E14.5",
"wt_E15.5",
"wt_E16.5",
"wt_E17.5",
"wt_NB")
nSamps <- length(sampleList)
for(i in 1:nSamps){
currentSample <- sampleList[i]
tab <- X[, grep(currentSample, colnames(X))]
rownames(tab) <- rownames(X)
fileName <- paste0(currentSample, ".csv")
print(fileName)
write.csv(tab, fileName, quote = F, row.names = TRUE)
}
hits
head(hits)
hitTable = hits
name = experimentName
top <- head(hitTable, n=10)
top
geneNames <- rownames(top)
geneNames
hitTable$pointTitle[which(rownames(hitTable) %in% geneNames)] <- ""
hitTable$pointColor <- "0"
hitTable$pointColor[which(hitTable$P.Value < 0.001)] <- "1"
textSize <- 20
labelSize <- 20
ggplot(data = hitTable, aes(x = logFC, y = (-1*log10(P.Value)))) +
scale_color_manual(values = c("black", "red")) +
geom_point(aes(color = pointColor)) +
theme_bw() +
geom_label_repel(aes(label=pointTitle),
size = 7) +
ggtitle(currentFile) +
ylab("-log10 p-value") +
xlab("Log Fold-Change") +
theme(axis.text.x = element_text(size = textSize),
axis.text.y = element_text(size = textSize),
axis.title.x = element_text(size = labelSize),
axis.title.y = element_text(size = labelSize))
ggplot(data = hitTable, aes(x = logFC, y = (-1*log10(P.Value)))) +
scale_color_manual(values = c("black", "red")) +
geom_point(aes(color = pointColor)) +
theme_bw() +
geom_label_repel(aes(label=pointTitle),
size = 7) +
ggtitle(currentFile) +
ylab("-log10 p-value") +
xlab("Log Fold-Change") +
theme(axis.text.x = element_text(size = textSize),
axis.text.y = element_text(size = textSize),
axis.title.x = element_text(size = labelSize),
axis.title.y = element_text(size = labelSize))
if (!require("pacman")) install.packages("pacman")
pacman::p_load(limma, edgeR, stringr,
reshape, ggplot2, optparse, ggrepel)
ggplot(data = hitTable, aes(x = logFC, y = (-1*log10(P.Value)))) +
scale_color_manual(values = c("black", "red")) +
geom_point(aes(color = pointColor)) +
theme_bw() +
geom_label_repel(aes(label=pointTitle),
size = 7) +
ggtitle(currentFile) +
ylab("-log10 p-value") +
xlab("Log Fold-Change") +
theme(axis.text.x = element_text(size = textSize),
axis.text.y = element_text(size = textSize),
axis.title.x = element_text(size = labelSize),
axis.title.y = element_text(size = labelSize))
ggplot(data = hitTable, aes(x = logFC, y = (-1*log10(P.Value)))) +
scale_color_manual(values = c("black", "red")) +
geom_point(aes(color = pointColor)) +
theme_bw() +
geom_label_repel(aes(label=pointTitle),
size = 7) +
ggtitle(name) +
ylab("-log10 p-value") +
xlab("Log Fold-Change") +
theme(axis.text.x = element_text(size = textSize),
axis.text.y = element_text(size = textSize),
axis.title.x = element_text(size = labelSize),
axis.title.y = element_text(size = labelSize))
ggplot(data = hitTable, aes(x = logFC, y = (-1*log10(P.Value)))) +
scale_color_manual(values = c("black", "red")) +
geom_point(aes(color = pointColor)) +
theme_bw() +
geom_label_repel(aes(label = pointTitle), size = 7) +
ggtitle(name) +
ylab("-log10 p-value") +
xlab("Log Fold-Change") +
theme(axis.text.x = element_text(size = textSize),
axis.text.y = element_text(size = textSize),
axis.title.x = element_text(size = labelSize),
axis.title.y = element_text(size = labelSize))
top <- head(hitTable, n=10)
geneNames <- rownames(top)
hitTable$pointTitle[which(rownames(hitTable) %in% geneNames)] <- ""
hitTable$pointColor <- "0"
hitTable$pointColor[which(hitTable$P.Value < 0.001)] <- "1"
ggplot(data = hitTable, aes(x = logFC, y = (-1*log10(P.Value)))) +
scale_color_manual(values = c("black", "red")) +
geom_point(aes(color = pointColor)) +
theme_bw() +
geom_label_repel(aes(label = pointTitle), size = 7) +
ggtitle(name) +
ylab("-log10 p-value") +
xlab("Log Fold-Change") +
theme(axis.text.x = element_text(size = textSize),
axis.text.y = element_text(size = textSize),
axis.title.x = element_text(size = labelSize),
axis.title.y = element_text(size = labelSize))
textSize <- 20
labelSize <- 20
top <- head(hitTable, n=10)
geneNames <- rownames(top)
hitTable$pointTitle[which(rownames(hitTable) %in% geneNames)] <- ""
hitTable$pointColor <- "0"
hitTable$pointColor[which(hitTable$P.Value < 0.001)] <- "1"
head(hitTable)
top <- head(hitTable, n=10)
geneNames <- rownames(top)
hitTable$pointTitle[which(!(rownames(hitTable) %in% geneNames))] <- ""
hitTable$pointColor <- "0"
hitTable$pointColor[which(hitTable$P.Value < 0.001)] <- "1"
head(hitTable)
ggplot(data = hitTable, aes(x = logFC, y = (-1*log10(P.Value)))) +
scale_color_manual(values = c("black", "red")) +
geom_point(aes(color = pointColor)) +
theme_bw() +
geom_label_repel(aes(label = pointTitle), size = 7) +
ggtitle(name) +
ylab("-log10 p-value") +
xlab("Log Fold-Change") +
theme(axis.text.x = element_text(size = textSize),
axis.text.y = element_text(size = textSize),
axis.title.x = element_text(size = labelSize),
axis.title.y = element_text(size = labelSize))
top <- head(hitTable, n=10)
geneNames <- rownames(top)
top
rm(hitTable)
hitTable = hits
head(hitTable)
textSize <- 20
labelSize <- 20
top <- head(hitTable, n=10)
geneNames <- rownames(top)
geneNames
which(!(rownames(hitTable) %in% geneNames))
hitTable$pointTitle[which(!(rownames(hitTable) %in% geneNames))] <- ""
head(hitTable)
hitTable$pointColor <- "0"
hitTable$pointColor[which(hitTable$P.Value < 0.001)] <- "1"
head(hitTable)
ggplot(data = hitTable, aes(x = logFC, y = (-1*log10(P.Value)))) +
scale_color_manual(values = c("black", "red")) +
geom_point(aes(color = pointColor)) +
theme_bw() +
geom_label_repel(aes(label = pointTitle), size = 7) +
ggtitle(name) +
ylab("-log10 p-value") +
xlab("Log Fold-Change") +
theme(axis.text.x = element_text(size = textSize),
axis.text.y = element_text(size = textSize),
axis.title.x = element_text(size = labelSize),
axis.title.y = element_text(size = labelSize))
hitTable$pointTitle <- rownames(hitTable)
hitTable$pointTitle[which(!(rownames(hitTable) %in% geneNames))] <- ""
hitTable$pointColor <- "0"
hitTable$pointColor[which(hitTable$P.Value < 0.001)] <- "1"
ggplot(data = hitTable, aes(x = logFC, y = (-1*log10(P.Value)))) +
scale_color_manual(values = c("black", "red")) +
geom_point(aes(color = pointColor)) +
theme_bw() +
geom_label_repel(aes(label = pointTitle), size = 7) +
ggtitle(name) +
ylab("-log10 p-value") +
xlab("Log Fold-Change") +
theme(axis.text.x = element_text(size = textSize),
axis.text.y = element_text(size = textSize),
axis.title.x = element_text(size = labelSize),
axis.title.y = element_text(size = labelSize))
if (!require("pacman")) install.packages("pacman")
pacman::p_load(stringr, reshape, ggplot2)
source('multiplot.R')
setwd("~/Documents/code/skin_dev_rna_seq/analysis/")
if (!require("pacman")) install.packages("pacman")
pacman::p_load(stringr, reshape, ggplot2)
source('multiplot.R')
file = "../results/all_results.csv"
df = read.csv(file, header=TRUE, stringsAsFactors=FALSE)
head(df)
colnames(df)[1] = "gene_Id"
head(df)
hitTableFile = "../results/all_results.csv"
geneList = "g23871,g17090"
strsplit(geneList, ",")[[1]]
geneList = strsplit(geneList, ",")[[1]]
geneList
hitTableFile
readHitTable <- function(file){
# Reads in log-fold change data from a limma voom analysis
#   (see genotype_analysis_script.R)
#
# Args:
#   file: String of the file name for the gene expression table
#
# Returns: A data frame for log-fold changes from the RNA-seq experiment
#          specified in search_string
#
df = read.csv(file, header=TRUE, stringsAsFactors=FALSE)
colnames(df)[1] <- "gene_Id"
return(df)
}
hits <- readHitTable(hitTableFile)
head(hits)
index <- which(hits$gene %in% geneList)
values <- hits[index, c(2,8)]
head(values)
index <- which(hits$gene %in% geneList)
values <- hits[index, c(1,2,8)]
head(values)
transform(values, RESULT = colsplit(ExperimentName, split = "_", names = c("Timepoint", "Genotype")))
head(values)
values <- transform(values, RESULT = colsplit(ExperimentName, split = "_", names = c("Timepoint", "Genotype")))
head(values)
?transform
values$ExperimentName = NULL
head(values)
mdf <- melt(hits_select, id.vars=3:4,
measure.vars=1:2, variable_name = "RESULT.genotype")
mdf <- melt(value, id.vars=3:4,
measure.vars=1:2, variable_name = "RESULT.genotype")
mdf <- melt(values, id.vars=3:4,
measure.vars=1:2, variable_name = "RESULT.genotype")
head(mdf)
mdf <- melt(values, id.vars=3:4,
measure.vars=1:2, variable_name = "RESULT.Genotype")
head(mdf)
head(values)
?melt
mdf <- melt(values, id.vars=c(1,4),
measure.vars=c(2,3), variable_name = "RESULT.Genotype")
head(mdf)
head(values)
mdf <- melt(values, id.vars=3:4,
measure.vars=1:2, variable_name = "RESULT.Genotype")
head(mdf)
head(values)
nrow(values)
nrow(values$gene_Id)
length(values$gene_Id)
length(unique(values$gene_Id))
ggplot(data=values, aes(x=RESULT.Timepoint, y = logFC, colour=RESULT.Genotype)) +
geom_point() +
geom_line(aes(group=RESULT.Genotype)) +
facet_grid(~ gene_Id) +
xlab("Timepoint") +
ylab("Log Fold-Change") +
theme(axis.text.x = element_text(colour="black", angle=45, hjust=1, vjust=1),
strip.text.x = element_text(face="bold"))
index <- which(hits$gene %in% geneList)
values <- hits[index, c(1,2,8)]
values <- transform(values, RESULT = colsplit(ExperimentName, split = "_", names = c("Timepoint", "Genotype")))
values$ExperimentName = NULL
# Set the name of the plot
plot_name = paste0(opt$plots,"/",paste(geneList, collapse="_"))
pdf(paste0(plot_name,".pdf"))
# ggplot(data=mdf, aes(x=RESULT.Timepoint, y = value, colour=genotype)) +
ggplot(data=values, aes(x=RESULT.Timepoint, y = logFC, colour=RESULT.Genotype)) +
geom_point() +
geom_line(aes(group=RESULT.Genotype)) +
facet_grid(~ gene_Id) +
xlab("Timepoint") +
ylab("Log Fold-Change") +
theme(axis.text.x = element_text(colour="black", angle=45, hjust=1, vjust=1),
strip.text.x = element_text(face="bold"))
ggplot(data=values, aes(x=RESULT.Timepoint, y = logFC, colour=RESULT.Genotype)) +
geom_point() +
geom_line(aes(group=RESULT.Genotype)) +
facet_grid(~ gene_Id) +
xlab("Timepoint") +
ylab("Log Fold-Change") +
theme_bw() +
theme(axis.text.x = element_text(colour="black", angle=45, hjust=1, vjust=1),
strip.text.x = element_text(face="bold"))
plot_name = paste0(opt$plots,"/",paste(geneList, collapse="_"))
pdf(paste0("goi_v_time_",plot_name,".pdf"))
ggplot(data=values, aes(x=RESULT.Timepoint, y = logFC, colour=RESULT.Genotype)) +
geom_point() +
geom_line(aes(group=RESULT.Genotype)) +
facet_grid(~ gene_Id) +
xlab("Timepoint") +
ylab("Log Fold-Change") +
theme_bw() +
theme(axis.text.x = element_text(colour="black", angle=45, hjust=1, vjust=1),
strip.text.x = element_text(face="bold"))
dev.off()
colnames(values)[c(3,4)] = c("Timepoint", "Genotype")
head(values)
ggplot(data=values, aes(x = Timepoint, y = logFC, colour = Genotype)) +
geom_point() +
geom_line(aes(group = Genotype)) +
facet_grid(~ gene_Id) +
xlab("Timepoint") +
ylab("Log Fold-Change") +
theme_bw() +
theme(axis.text.x = element_text(colour="black", angle=45, hjust=1, vjust=1),
strip.text.x = element_text(face="bold"))
